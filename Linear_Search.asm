for_Bucle:
0b00011000	;MOV  ACC, CTE
0b00000000   ;index           
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]
0b00111000	;INV ACC
0b00010000	;Mov, A, ACC
0b00011000	;Mov ACC, CTE
0b00000001	;0x01	
0b01001000	;ADD ACC, A
0b00010000	;Mov, A, ACC
0b00011000	;MOV  ACC, CTE
0b00000000   ;size      
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]
0b01001000	;ADD ACC, A

If condicional:
0b00011000	;MOV  ACC, CTE
0b00000000   ;index           
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]
0b00010000	;Mov, A, ACC
0b00011000	;MOV  ACC, CTE
0b00000000   ;numbers
0b01001000	;ADD ACC, A
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]
0b00111000	;INV ACC
0b00010000	;Mov, A, ACC
0b00011000	;Mov ACC, CTE
0b00000001	;0x01	
0b01001000	;ADD ACC, A
0b00010000	;Mov, A, ACC
0b00011000	;MOV  ACC, CTE
0b00000000   ;index           
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]
0b01001000	;ADD ACC, A
0b01011000	;JZ KEY
0b01010000	;JMP i++

I++:
0b00011000	;MOV  ACC, CTE
0b00000000   ;index           
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]
0b00010000	;Mov, A, ACC
0b00011000	;Mov ACC, CTE
0b00000001	;0x01
0b01001000	;ADD ACC, A	
0b00110000	;Mov [DPTR], ACC
0b01010000	;JMP for_bucle

key:
0b00011000	;MOV  ACC, CTE
0b00000000   ;index           
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]
0b00010000	;Mov, A, ACC
0b00011000	;MOV  ACC, CTE
0b00000000   ;key       
0b00101000	;Mov DPTR, ACC
0b00010000	;Mov, A, ACC
0b00101000	;Mov DPTR, ACC
	
FIN: 		
0b11111000	;HALT

index:0x00
key:0x00
numbers:0x01
        0x02
        0x03
        0x04
        0x05
        0x06
        0x07
        0x08
