FOR_I:

Load_size:
0b00011000	;MOV  ACC, CTE
0b00000111	;SIZE     
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]

neg_size: 
0b00111000	;Inv ACC
0b00010000	;Mov, A, ACC
0b00011000	;MOV  ACC, CTE
0b00000001	;0x01
0b01001000	;ADD ACC, A
0b00010000	;Mov, A, ACC
          
load_it: 
0b00011000	;MOV  ACC, CTE
0b00000001   ;0x01
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]
0b01001000	;ADD ACC, A
0b00010000	;Mov, A, ACC
0b00011000	;MOV  ACC, CTE
0b00000000   ;I
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]
0b01001000	;ADD ACC, A
          
loop_test: 
0b01100000	;JN hacia FOR_J
0b01010000	;IJMP CTE hacia END_LOOP

FOR_J:
Load_size:
0b00011000	;MOV  ACC, CTE
0b00000111	;SIZE     
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]

neg_size: 
0b00111000	;Inv ACC
0b00010000	;Mov, A, ACC
0b00011000	;MOV  ACC, CTE
0b00000001	;0x01
0b01001000	;ADD ACC, A
0b00010000	;Mov, A, ACC
          
load_it: 
0b00011000	;MOV  ACC, CTE
0b00000001   ;0x01
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]
0b01001000	;ADD ACC, A
0b00010000	;Mov, A, ACC
0b00011000	;MOV  ACC, CTE
0b00000000   ;I
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]
0b01001000	;ADD ACC, A
0b00011000	;MOV  ACC, CTE
0b00000000   ;J
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]
0b01001000	;ADD ACC, A
          
loop_test: 
0b01100000	;JN hac√≠a if_comp:
0b01010000	;IJMP CTE hacia FOR_I

If_comp:
array[J]:
0b00011000	;MOV  ACC, CTE
0b00000001   ;ARRAY          
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]
0b00010000	;Mov, A, ACC
0b00011000	;MOV  ACC, CTE
0b00000001	;J
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]
0b01001000	;ADD ACC, A

neg-array[J]:
0b00111000	;Inv ACC
0b00010000	;Mov, A, ACC
0b00011000	;MOV  ACC, CTE
0b00000001	;0x01
0b01001000	;ADD ACC, A
0b00010000	;Mov A, ACC

array[J+1]:
0b00011000	;MOV  ACC, CTE
0b00000001   ;ARRAY          
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]
0b00010000	;Mov, A, ACC
0b00011000	;MOV  ACC, CTE
0b00000001	;0x01
0b01001000	;ADD ACC, A
0b00010000	;Mov A, ACC
0b00011000	;MOV  ACC, CTE
0b00000001	;J
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]

if_test:
0b01100000	;JN hacia SWAP
0b01010000	;IJMP CTE hacia FOR_J

SWAP:

temp=*array[J]:
0b00011000	;MOV  ACC, CTE
0b00000000   ;J
0b00010000	;Mov, A, ACC
0b00011000	;MOV  ACC, CTE
0b00000001   ;ARRAY          
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]
0b00010000	;Mov, A, ACC
0b00011000	;MOV  ACC, CTE
0b00000000	;TEMP  
0b00101000	;Mov DPTR, ACC
0b00010000	;Mov, A, ACC
0b00101000	;Mov DPTR, ACC

*array[J]=*array[J+1]:
0b00011000	;MOV  ACC, CTE
0b00000001   ;ARRAY          
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]
0b00010000	;Mov, A, ACC
0b00011000	;MOV  ACC, CTE
0b00000001	;0x01
0b01001000	;ADD ACC, A
0b00010000	;Mov A, ACC
0b00011000	;MOV  ACC, CTE
0b00000001	;J
0b00101000	;Mov DPTR, ACC
0b00010000	;Mov, A, ACC
0b00011000	;MOV  ACC, CTE
0b00000001   ;ARRAY          
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]
0b00011000	;MOV  ACC, CTE
0b00000001	;J
0b00101000	;Mov DPTR, ACC
0b00010000	;Mov, A, ACC
0b00101000	;Mov DPTR, ACC

*array[J+1]=temp:
0b00011000	;MOV  ACC, CTE
0b00000000	;TEMP  
0b00010000	;Mov, A, ACC
0b00011000	;MOV  ACC, CTE
0b00000000   ;J
0b00010000	;Mov, A, ACC
0b00011000	;MOV  ACC, CTE
0b00000001   ;ARRAY          
0b00101000	;Mov DPTR, ACC
0b00100000	;Mov, ACC, [DPTR]
0b00101000	;Mov DPTR, ACC
0b00010000	;Mov, A, ACC
0b00101000	;Mov DPTR, ACC
0b01010000	;IJMP CTE hacia FOR_J

END_LOOP:
0b11111000	;HALT


I: 0x00
J: 0x00
TEMP: 0x00
SIZE: 0x06
ARRAY:0x01
      0x02
      0x03
      0x04
      0x05
      0x06
      0x07
